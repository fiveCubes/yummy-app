{"version":3,"sources":["components/business/Business.js","components/businessList/BusinessList.js","components/searchBar/SearchBar.js","util/Yelp.js","components/app/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","city","state","zipcode","category","rating","reviewcount","React","Component","BusinessList","b","businesslist","map","bus","i","key","SearchBar","term","location","sortBy","sortByOptions","handleTermChange","bind","handleLocationChange","handleSearch","event","search","preventDefault","sortByOption","setState","Object","keys","sortByoption","sortByOptionValue","onClick","handleSortByChange","getSortByClass","target","value","renderSortByOptions","placeholder","onChange","Yelp","fetch","headers","Authorization","then","response","json","jsonResponse","businesses","id","image_url","address","address1","zip_code","categories","title","review_count","App","searchYelp","searchBy","alert","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.09d1e975.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\n\n\nclass Business extends React.Component {\n  render() {\n    return (\n      <div className=\"b-container\">\n          <div className=\"b-item1\">\n            <img src={this.props.business.imageSrc} alt='' />\n          </div>\n\n        <div className=\"b-item2\">\n        <h2 >{this.props.business.name}</h2>\n        </div>\n         <div className = \"b-item3\">\n            <p className=\"b-details\" >{this.props.business.city} | {this.props.business.state + \" \" + this.props.business.zipcode} </p>\n            <h3 className=\"b-details\">{this.props.business.category}</h3>\n            <h3 className=\"b-details\">{this.props.business.rating + \" \"}stars {\"| Count \" +this.props.business.reviewcount}</h3>\n         </div>\n           \n      </div>)\n\n  }\n}\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../business/Business';\n\nclass BusinessList extends React.Component\n{\n   \n\n    render()\n    {\n       \n        const b = this.props.businesslist.map((bus,i)=> <Business key={i} business = {bus}></Business>)\n    \n        return (<div className=\"BusinessList\">\n            \n            {b}\n            \n            </div>)\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\n\n\nclass SearchBar extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            term: \"\",\n            location: \"\",\n            sortBy: \"best_match\"\n        }\n\n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count'}\n\n            this.handleTermChange = this.handleTermChange.bind(this);\n            this.handleLocationChange = this.handleLocationChange.bind(this);\n            this.handleSearch = this.handleSearch.bind(this);\n\n    }\n\n    handleSearch(event)\n    {\n        this.props.search(this.state.term,this.state.location,this.state.sortBy);\n        event.preventDefault();\n    }\n\n    getSortByClass(sortByOption)\n    {\n        if(sortByOption === this.state.sortBy)\n        {\n            return 'active';\n        }\n        return '';\n    }\n\n    handleSortByChange(sortByOption)\n    {\n        this.setState({sortBy:sortByOption})\n    }\n\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map(sortByoption => {\n            let sortByOptionValue = this.sortByOptions[sortByoption];\n            return <li onClick= {this.handleSortByChange.bind(this,sortByOptionValue)} key={sortByOptionValue} className = { this.getSortByClass(sortByOptionValue)}>{sortByoption}</li>\n        })\n    }\n\n    handleTermChange(event)\n    {\n\n        this.setState({term: event.target.value});\n    }\n\n    handleLocationChange(event)\n    {\n        this.setState({location:event.target.value});\n\n    }\n\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                        {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input placeholder=\"Search Businesses\" onChange={this.handleTermChange} />\n                    <input placeholder=\"Where?\" onChange={this.handleLocationChange}/>\n                </div>\n                <div className=\"SearchBar-submit\">\n                    <a onClick={this.handleSearch}>Let's Go</a>\n                </div>\n            </div>)\n\n    }\n}\n\nexport default SearchBar;","const  apiKey = \"ba-2gOXGo94fiV69t76i3LH4CWoYX02hfTG3nv1ClQPgQhO23LExM_zmayKauT1ydjDv5Io4QLCqghqMK0PF_6CO4RrNGno2v4QKH2jtv8CmBU_smSwRErz3gCDqXnYx\"\nconst Yelp = {\n\n    search(term,location,sortBy)\n    {\n   \n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n    {headers:{ Authorization: `Bearer ${apiKey}`}}).then((response) =>\n    {\n    //  console.log(response.ok);\n     return response.json();\n    }\n    )\n    .then(jsonResponse => {\n    \n        //console.log(\"json response\")\n        //console.log(jsonResponse);\n        //console.log(jsonResponse.businesses)\n        if(jsonResponse.businesses)\n        {\n             return jsonResponse.businesses.map(business =>\n                {\n                return {\n                    id: business.id,\n                    imageSrc: business.image_url,\n                    name: business.name,\n                    address: business.address1,\n                    city: business.location.city,\n                    state: business.location.state,\n                    zipcode: business.location.zip_code,\n                    category: business.categories[0].title,\n                    rating: business.rating,\n                    reviewcount: business.review_count\n                   \n                    }\n                }\n             );\n        }\n    });\n\n    }\n\n}\n\nexport default Yelp;","\n\nimport React from 'react';\nimport './App.css';\nimport BusinessList from '../businessList/BusinessList';\nimport SearchBar from '../searchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\n\n\nclass App extends React.Component\n{\n    constructor()\n    {\n        super();\n        this.state= {\n            business:[]\n        }\n        this.searchYelp = this.searchYelp.bind(this);\n    }\n\n    searchYelp(term,location,searchBy)\n    {\n        //console.log(`${term}, ${location},${searchBy}`)\n        if(!location)\n        {\n            location=\"seatle\"\n        }\n        Yelp.search(term,location,searchBy)\n        .then(b=> {\n            //console.log(\"going to start setchange\")\n            this.setState({business: b});\n            //console.log(\"state changed\");\n            //console.log(\"state changed\");\n            \n        });\n\n\n    }\n    componentDidMount()\n    {\n        this.searchYelp(\"\",\"seatle\",\"best_match\");\n    }\n    \n    render()\n    {\n        \n        if(!this.state.business)\n        {\n           this.state.business=[];\n           alert(\"search Not Found\")\n        }\n        return ( \n            <div>\n                <h1 id=\"top-heading\"> \n                 Yummy!!!!!!\n                </h1>\n                <SearchBar search = {this.searchYelp}></SearchBar>\n               {/* <BusinessList businesslist= {this.state.business ? this.state.business:[]}></BusinessList> */}\n                <BusinessList businesslist = {this.state.business}></BusinessList>\n    \n        </div>\n            )       \n    }\n}\n\n//const App = () => <h1> testing</h1>\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}